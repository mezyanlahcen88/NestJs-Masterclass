var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.044,1,2.31]],["body/controllers/AppController.html",[0,1.662,1,3.676,2,1.319,3,0.285,4,0.248,5,0.248,6,3.678,7,0.781,8,2.148,9,5.325,10,1.405,11,0.024,12,0.958,13,4.338,14,1.705,15,1.374,16,0.456,17,0.896,18,3.369,19,3.678,20,0.285,21,0.139,22,3.243,23,1.952,24,1.705,25,4.338,26,0.019,27,0.019]],["title/modules/AppModule.html",[28,1.044,29,2.31]],["body/modules/AppModule.html",[1,3.124,2,1.192,3,0.175,4,0.152,5,0.152,11,0.025,16,0.531,17,0.551,18,3.211,19,2.261,20,0.175,21,0.085,26,0.014,27,0.014,28,1.412,29,4.472,30,1.121,31,1.2,32,1.388,33,1.388,34,1.2,35,2.417,36,1.388,37,2.261,38,2.261,39,2.261,40,3.211,41,3.495,42,3.495,43,3.495,44,2.968,45,2.039,46,1.388,47,1.289,48,2.667,49,3.444,50,2.667,51,2.667,52,2.667,53,2.667,54,2.667,55,1.994,56,1.502,57,1.289,58,2.667,59,0.921,60,2.667,61,2.667,62,2.667,63,2.667,64,1.994,65,0.589,66,3.919,67,2.667,68,2.667,69,2.667,70,2.667,71,2.667,72,1.794,73,2.667,74,2.667,75,2.261,76,2.261,77,1.794,78,2.667,79,2.667,80,1.388,81,2.667,82,2.261,83,3.919,84,2.667,85,3.919,86,3.322,87,1.794,88,2.667,89,2.667]],["title/injectables/AppService.html",[18,1.934,90,1.186]],["body/injectables/AppService.html",[3,0.298,4,0.26,5,0.26,7,0.818,8,2.211,9,5.414,11,0.024,12,1.003,14,1.786,15,1.414,16,0.379,17,0.939,18,3.168,20,0.298,21,0.145,24,1.786,26,0.02,27,0.02,90,1.942,91,2.365,92,3.853,93,4.545,94,4.545,95,4.545,96,4.545]],["title/controllers/AuthController.html",[0,1.044,97,2.31]],["body/controllers/AuthController.html",[0,1.375,2,1.375,3,0.297,4,0.258,5,0.258,11,0.025,16,0.468,17,0.934,20,0.297,21,0.145,23,2.035,26,0.02,27,0.02,97,3.773,98,3.835,99,2.547,100,4.756,101,3.173,102,3.835,103,4.523,104,2.547,105,2.547,106,2.772,107,2.547]],["title/modules/AuthModule.html",[28,1.044,40,1.934]],["body/modules/AuthModule.html",[2,1.526,3,0.25,4,0.217,5,0.217,11,0.024,16,0.499,17,0.786,20,0.25,21,0.122,26,0.017,27,0.017,28,1.709,30,1.598,31,1.711,32,1.979,33,1.979,34,1.711,35,2.924,36,2.924,40,3.664,44,2.612,45,2.612,46,1.979,47,1.837,49,2.558,97,3.78,101,3.562,102,3.224,108,3.224,109,3.224,110,3.224,111,3.803,112,3.377,113,3.803,114,3.224]],["title/injectables/AuthService.html",[90,1.186,101,1.787]],["body/injectables/AuthService.html",[3,0.22,4,0.191,5,0.191,7,0.603,8,1.811,11,0.024,12,1.163,14,1.811,15,1.656,16,0.384,17,0.692,20,0.22,21,0.107,23,1.507,24,1.811,26,0.016,27,0.016,57,1.618,65,1.017,72,3.544,80,1.743,87,2.253,90,1.591,91,1.743,101,2.398,104,2.595,105,1.886,107,1.886,112,2.253,115,2.84,116,3.768,117,4.811,118,5.268,119,2.84,120,3.043,121,3.35,122,2.074,123,1.697,124,1.401,125,3.35,126,3.35,127,4.609,128,1.94,129,3.35,130,2.253,131,2.84,132,3.35,133,2.84,134,2.504,135,3.35,136,3.35]],["title/classes/Cat.html",[21,0.11,137,2.31]],["body/classes/Cat.html",[3,0.34,4,0.296,5,0.296,11,0.023,20,0.34,21,0.166,26,0.021,27,0.021,137,4.098,138,1.79,139,4.396]],["title/controllers/CatsController.html",[0,1.044,140,2.31]],["body/controllers/CatsController.html",[0,0.832,2,0.832,3,0.18,4,0.156,5,0.156,7,0.493,8,1.569,10,1.785,11,0.025,12,1.217,14,2.166,15,1.561,16,0.432,17,0.565,20,0.18,21,0.088,22,2.045,23,1.231,24,2.166,26,0.014,27,0.014,59,1.627,65,1.144,99,1.54,122,2.332,123,1.908,124,1.576,128,2.118,140,2.685,141,2.32,142,2.32,143,1.677,144,2.918,145,2.685,146,2.685,147,2.685,148,2.32,149,2.994,150,2.736,151,2.736,152,1.84,153,3.385,154,2.736,155,1.84,156,3.385,157,2.736,158,1.84,159,3.732,160,3.385,161,2.736,162,2.685,163,1.84,164,1.84,165,2.32,166,2.654,167,2.32,168,1.84,169,2.685,170,1.84,171,2.736,172,2.32,173,2.736,174,2.736,175,2.32,176,2.736,177,2.32,178,2.736,179,2.32,180,2.736]],["title/modules/CatsModule.html",[28,1.044,41,2.105]],["body/modules/CatsModule.html",[2,1.616,3,0.272,4,0.237,5,0.237,11,0.024,16,0.489,17,0.857,20,0.272,21,0.133,26,0.019,27,0.019,28,1.782,30,1.743,31,1.867,32,2.16,33,2.16,34,1.867,35,3.05,36,2.16,41,4.004,45,2.765,46,2.16,47,2.005,140,3.942,166,3.679,167,3.518,181,3.518,182,3.518,183,4.15,184,4.15]],["title/injectables/CatsService.html",[90,1.186,166,1.934]],["body/injectables/CatsService.html",[3,0.192,4,0.167,5,0.167,7,0.526,8,1.645,11,0.024,12,1.248,14,2.382,15,1.421,16,0.408,17,0.603,20,0.192,21,0.093,24,2.222,26,0.015,27,0.015,65,1.179,90,1.445,91,1.52,122,2.403,123,1.967,124,1.624,128,2.166,137,3.593,142,2.475,143,1.758,144,3.008,145,2.815,146,2.815,147,2.815,148,3.548,149,2.942,152,2.815,155,2.815,158,2.815,159,3.713,166,2.356,168,1.964,169,2.815,170,1.964,185,2.475,186,2.92,187,2.92,188,3.049,189,2.92,190,2.92,191,2.92,192,4.794,193,2.475,194,1.644,195,1.964,196,2.475]],["title/classes/CreateCatDto.html",[21,0.11,149,1.787]],["body/classes/CreateCatDto.html",[3,0.339,4,0.295,5,0.295,11,0.022,20,0.339,21,0.165,26,0.021,27,0.021,138,1.781,149,3.16,197,4.373,198,3.856]],["title/classes/CreatePostDto.html",[21,0.11,199,2.105]],["body/classes/CreatePostDto.html",[3,0.111,4,0.097,5,0.097,7,0.305,10,1.791,11,0.024,12,1.221,15,1.497,16,0.395,20,0.111,21,0.112,26,0.01,27,0.01,59,1.204,65,1.347,80,2.09,124,1.755,138,0.586,143,0.713,199,1.691,200,4.23,201,1.268,202,1.37,203,2.607,204,2.345,205,2.956,206,3.889,207,2.956,208,2.345,209,2.973,210,2.345,211,2.956,212,2.607,213,1.697,214,1.697,215,1.697,216,1.697,217,2.462,218,1.697,219,2.759,220,2.062,221,1.691,222,2.759,223,1.697,224,1.697,225,1.697,226,2.759,227,2.412,228,3.405,229,4.017,230,1.856,231,2.339,232,1.697,233,1.697,234,2.062,235,2.759,236,2.759,237,2.339,238,2.759,239,3.541,240,2.759,241,2.759,242,1.697,243,1.697,244,1.697,245,2.759,246,2.759,247,3.487,248,2.759,249,2.759,250,1.697,251,1.697,252,1.697,253,4.017,254,4.017,255,2.339,256,2.759,257,2.759,258,2.759,259,2.759,260,2.759,261,3.487,262,1.697,263,3.304,264,2.339,265,2.339,266,2.339,267,1.697,268,1.697,269,1.697,270,1.697,271,4.017,272,1.697,273,1.697,274,1.697,275,2.339,276,1.438,277,3.487,278,1.697,279,2.759,280,2.759,281,2.709,282,3.732,283,2.973,284,2.339,285,1.438,286,1.438,287,2.759,288,0.883,289,1.438,290,1.268,291,1.141,292,1.438,293,3.541,294,4.016,295,0.883,296,1.697,297,2.339,298,1.438,299,1.697,300,1.697,301,1.438,302,1.697,303,1.697,304,1.697,305,1.438,306,1.268,307,1.268]],["title/classes/CreatePostMetaOptionsDto.html",[21,0.11,217,2.105]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.274,4,0.238,5,0.238,7,0.75,10,1.726,11,0.024,12,1.176,15,1.339,16,0.348,20,0.274,21,0.171,26,0.019,27,0.019,59,2.027,65,1.176,138,1.439,200,4.39,202,2.094,217,3.265,281,3.793,283,3.584,288,2.169,291,3.95,306,4.39,307,4.39,308,3.534,309,4.168,310,4.168,311,4.168]],["title/classes/CreateTagDto.html",[21,0.11,312,1.934]],["body/classes/CreateTagDto.html",[3,0.215,4,0.187,5,0.187,7,0.589,10,1.911,11,0.024,12,1.302,15,1.648,16,0.273,20,0.215,21,0.145,26,0.016,27,0.016,65,1.302,123,2.068,124,1.856,128,1.204,138,1.129,202,1.781,204,3.778,208,3.778,209,3.778,227,2.713,281,3.188,283,4.291,284,3.842,288,1.701,312,2.552,313,5.174,314,2.444,315,3.27,316,3.27,317,3.27,318,3.27,319,3.27,320,3.27,321,3.27,322,3.27,323,3.27,324,2.199,325,2.772,326,3.27,327,3.27]],["title/classes/CreateUserDto.html",[21,0.11,328,1.787]],["body/classes/CreateUserDto.html",[3,0.208,4,0.181,5,0.181,7,0.571,10,1.796,11,0.024,12,1.224,15,1.591,16,0.265,20,0.208,21,0.142,26,0.015,27,0.015,65,1.224,72,3.442,124,1.349,130,3.442,138,1.095,188,2.144,202,1.744,255,3.762,281,3.397,282,3.317,283,3.728,285,2.689,286,2.689,288,1.651,305,3.762,325,2.689,328,2.309,329,4.946,330,2.371,331,3.826,332,4.339,333,3.172,334,3.172,335,3.172,336,3.172,337,3.172,338,3.172,339,3.172,340,5.543,341,4.437,342,4.437,343,4.437,344,4.437,345,4.437,346,6.045,347,4.437,348,4.437,349,4.437,350,3.172,351,4.437,352,4.437,353,3.172,354,3.172]],["title/classes/GetUsersParamDto.html",[21,0.11,355,2.105]],["body/classes/GetUsersParamDto.html",[3,0.271,4,0.236,5,0.236,7,0.744,10,1.339,11,0.024,12,0.912,16,0.488,20,0.271,21,0.187,26,0.018,27,0.018,65,1.291,124,1.611,128,2.153,138,1.427,188,2.826,202,2.082,282,3.961,288,2.15,290,3.089,293,3.089,294,4.492,295,2.15,355,3.247,356,4.492,357,3.247,358,3.503,359,4.132,360,4.132,361,4.492]],["title/classes/PatchPostDto.html",[21,0.11,362,2.31]],["body/classes/PatchPostDto.html",[3,0.252,4,0.219,5,0.219,7,0.69,10,1.242,11,0.024,12,0.846,16,0.5,20,0.252,21,0.162,26,0.018,27,0.018,65,0.846,80,1.995,123,1.411,128,2.355,138,1.323,143,1.611,188,1.852,199,2.349,201,2.866,202,1.983,220,3.772,227,2.438,239,3.772,281,3.093,288,1.995,293,3.772,295,1.995,328,1.995,361,4.278,362,3.394,363,4.278,364,3.394,365,5.047,366,3.834,367,5.047,368,3.834,369,3.834,370,2.579,371,3.834,372,2.579,373,3.25,374,3.25]],["title/classes/PatchUserDto.html",[21,0.11,375,2.31]],["body/classes/PatchUserDto.html",[3,0.312,4,0.271,5,0.271,11,0.024,16,0.482,20,0.312,21,0.152,26,0.02,27,0.02,138,1.639,143,1.995,328,2.471,330,3.549,364,3.887,370,3.193,372,3.193,375,3.887,376,4.025,377,5.779,378,3.549,379,3.549]],["title/entities/Post.html",[59,1.186,380,2.105]],["body/entities/Post.html",[3,0.133,4,0.116,5,0.116,7,0.366,10,1.85,11,0.024,12,1.315,15,1.522,16,0.403,20,0.133,21,0.065,26,0.011,27,0.011,59,1.357,65,1.431,77,1.367,80,3.041,124,1.841,128,1.448,188,1.54,202,1.253,203,2.939,204,2.645,205,3.333,206,4.152,207,3.333,208,2.645,209,2.645,210,2.645,211,3.333,212,2.939,217,2.409,221,3.404,234,2.382,237,2.702,263,3.615,275,2.702,276,1.723,289,1.723,291,1.367,292,1.723,297,4.709,324,3.451,380,1.953,381,1.723,382,4.152,383,3.774,384,4.739,385,2.032,386,3.835,387,2.702,388,2.032,389,2.939,390,2.032,391,2.032,392,4.452,393,3.187,394,2.032,395,2.032,396,2.032,397,3.187,398,2.382,399,2.032,400,2.032,401,2.032,402,2.702,403,2.032,404,4.269,405,1.144,406,2.032,407,2.032,408,1.367,409,2.032,410,2.032,411,2.032,412,2.032,413,2.032,414,2.032,415,2.032]],["title/controllers/PostsController.html",[0,1.044,416,2.31]],["body/controllers/PostsController.html",[0,0.76,2,0.76,3,0.164,4,0.143,5,0.143,7,0.45,8,1.468,10,1.448,11,0.025,12,0.987,14,1.757,15,1.124,16,0.443,17,0.516,20,0.164,21,0.08,23,1.125,24,0.982,26,0.013,27,0.013,59,2.049,65,0.987,76,2.119,99,1.408,104,1.408,105,1.408,106,1.532,107,1.408,116,3.717,122,2.012,123,1.646,124,1.36,162,1.681,163,2.512,164,1.681,194,2.103,195,2.512,199,3.413,210,1.681,227,2.16,295,1.301,362,3.882,373,3.166,408,1.681,416,2.512,417,2.119,418,3.735,419,3.166,420,3.735,421,3.735,422,2.5,423,4.471,424,3.735,425,2.5,426,5.309,427,3.735,428,3.735,429,3.735,430,2.5,431,2.5,432,3.735,433,2.5,434,3.735,435,2.5,436,3.166,437,2.5,438,3.735,439,3.735,440,2.5,441,2.5,442,3.735,443,2.5,444,2.5,445,2.518,446,2.119,447,3.166,448,3.791,449,2.119,450,2.119,451,2.5,452,2.5,453,2.5,454,2.5,455,2.5,456,2.119,457,2.119,458,2.5,459,2.5,460,2.5,461,2.5,462,2.5,463,2.5,464,2.5]],["title/modules/PostsModule.html",[28,1.044,42,2.105]],["body/modules/PostsModule.html",[2,1.499,3,0.243,4,0.211,5,0.211,11,0.024,16,0.528,17,0.764,20,0.243,21,0.118,26,0.017,27,0.017,28,1.686,30,1.554,31,1.665,32,1.925,33,1.925,34,1.665,35,2.885,36,1.925,42,4.024,44,3.295,45,2.565,46,1.925,47,1.787,49,3.316,55,2.766,56,2.083,59,1.277,114,3.137,416,3.729,445,3.565,446,3.137,465,3.137,466,3.7,467,3.137,468,3.7,469,3.7,470,3.137,471,3.7]],["title/injectables/PostsService.html",[90,1.186,445,1.934]],["body/injectables/PostsService.html",[3,0.182,4,0.159,5,0.159,7,0.5,8,1.586,11,0.025,12,1.049,14,1.586,15,1.195,16,0.482,17,0.573,20,0.182,21,0.089,23,1.249,24,1.586,26,0.014,27,0.014,56,1.563,57,2.678,59,0.958,64,3.553,65,1.049,87,1.867,90,1.393,91,1.444,104,2.272,105,1.563,106,1.701,107,2.272,116,3.544,119,2.353,120,2.794,122,2.139,123,1.75,124,1.445,131,2.353,134,2.075,144,2.272,149,2.884,169,1.867,203,3.9,212,3.016,357,1.701,405,1.563,419,3.42,436,2.353,445,2.272,470,2.353,472,2.353,473,5.218,474,3.9,475,2.776,476,4.035,477,2.776,478,2.353,479,4.035,480,2.776,481,2.776,482,2.353,483,2.776,484,2.776,485,4.423,486,4.035,487,3.42,488,4.753,489,2.776,490,2.353,491,2.776]],["title/controllers/ProductsController.html",[0,1.044,492,2.31]],["body/controllers/ProductsController.html",[0,1.511,2,1.511,3,0.326,4,0.284,5,0.284,11,0.023,16,0.415,17,1.027,20,0.326,21,0.159,26,0.021,27,0.021,99,2.798,492,3.996,493,4.214,494,4.97,495,4.97]],["title/modules/ProductsModule.html",[28,1.044,496,2.567]],["body/modules/ProductsModule.html",[2,1.763,3,0.313,4,0.273,5,0.273,11,0.024,16,0.484,17,0.986,20,0.313,21,0.153,26,0.02,27,0.02,28,1.763,30,2.005,492,4.2,496,4.333,497,4.772,498,4.772]],["title/classes/Tag.html",[21,0.11,499,2.105]],["body/classes/Tag.html",[3,0.167,4,0.145,5,0.145,7,0.458,10,1.975,11,0.024,12,1.346,15,1.602,16,0.212,20,0.167,21,0.082,26,0.013,27,0.013,65,1.346,80,3.229,123,1.843,124,1.705,128,1.843,138,0.879,202,1.488,204,3.367,208,3.367,209,3.367,221,3.068,227,2.418,234,4.192,324,3.041,382,4.638,383,3.21,384,4.341,386,3.379,387,2.159,389,1.904,398,3.742,402,3.21,404,1.904,405,1.434,499,2.321,500,2.159,501,4.521,502,4.521,503,4.521,504,4.521,505,2.546,506,4.521,507,2.546,508,2.546,509,2.546,510,3.21,511,2.546,512,3.787,513,2.546,514,2.546,515,2.546,516,4.521,517,2.546,518,4.521,519,3.787,520,2.546]],["title/controllers/TagController.html",[0,1.044,521,2.31]],["body/controllers/TagController.html",[0,0.832,2,0.832,3,0.18,4,0.156,5,0.156,7,0.493,8,1.569,10,1.785,11,0.025,12,1.217,14,2.166,15,1.561,16,0.432,17,0.565,20,0.18,21,0.088,22,2.045,23,1.231,24,2.166,26,0.014,27,0.014,59,1.627,65,1.144,99,1.54,122,2.332,123,1.908,124,1.576,128,2.118,143,1.677,144,2.918,145,2.685,146,2.685,147,2.685,152,1.84,153,3.385,155,1.84,156,3.385,158,1.84,160,3.385,162,2.685,163,1.84,164,1.84,165,2.32,168,1.84,170,1.84,172,2.32,175,2.32,177,2.32,179,2.32,312,3.24,499,1.677,521,2.685,522,2.32,523,2.32,524,2.736,525,2.736,526,2.736,527,2.736,528,3.732,529,2.736,530,2.654,531,2.32,532,2.984,533,2.736,534,2.736,535,2.736,536,2.736,537,2.736,538,2.736]],["title/modules/TagModule.html",[28,1.044,43,2.105]],["body/modules/TagModule.html",[2,1.616,3,0.272,4,0.237,5,0.237,11,0.024,16,0.489,17,0.857,20,0.272,21,0.133,26,0.019,27,0.019,28,1.782,30,1.743,31,1.867,32,2.16,33,2.16,34,1.867,35,3.05,36,2.16,43,4.004,45,2.765,46,2.16,47,2.005,521,3.942,530,3.679,531,3.518,539,3.518,540,3.518,541,4.15,542,4.15]],["title/injectables/TagService.html",[90,1.186,530,1.934]],["body/injectables/TagService.html",[3,0.192,4,0.167,5,0.167,7,0.526,8,1.645,11,0.024,12,1.248,14,2.382,15,1.421,16,0.408,17,0.603,20,0.192,21,0.093,24,2.222,26,0.015,27,0.015,65,1.179,90,1.445,91,1.52,122,2.403,123,1.967,124,1.624,128,2.166,143,1.758,144,3.008,145,2.815,146,2.815,147,2.815,152,2.815,155,2.815,158,2.815,168,1.964,170,1.964,188,3.049,192,4.794,193,2.475,194,1.644,195,1.964,196,2.475,312,3.184,499,3.465,523,3.548,528,3.713,530,2.356,532,3.128,543,2.475,544,2.92,545,2.92,546,2.92,547,2.92,548,2.92]],["title/classes/UpdateCatDto.html",[21,0.11,159,2.105]],["body/classes/UpdateCatDto.html",[3,0.312,4,0.271,5,0.271,11,0.024,16,0.482,20,0.312,21,0.152,26,0.02,27,0.02,138,1.639,143,1.995,149,2.471,159,3.542,169,3.193,198,3.549,364,3.887,370,3.193,378,3.549,379,3.549,549,4.025,550,5.779]],["title/classes/UpdateTagDto.html",[21,0.11,528,2.105]],["body/classes/UpdateTagDto.html",[3,0.313,4,0.273,5,0.273,11,0.024,16,0.484,20,0.313,21,0.153,26,0.02,27,0.02,138,1.647,143,2.005,295,2.483,312,2.687,314,3.567,364,3.899,370,3.209,528,3.552,532,3.567,551,4.045,552,5.797]],["title/entities/User.html",[57,1.659,380,2.105]],["body/entities/User.html",[3,0.201,4,0.175,5,0.175,7,0.551,10,1.865,11,0.024,12,1.271,15,1.604,16,0.255,20,0.201,21,0.098,26,0.015,27,0.015,57,2.09,65,1.271,72,2.91,77,2.058,80,2.612,128,1.848,130,3.376,202,1.701,221,3.662,324,4.221,331,3.752,332,4.255,374,2.594,380,2.652,382,4.078,384,4.69,386,4.078,389,3.234,398,2.288,404,4.303,405,1.723,510,2.594,553,2.594,554,6.275,555,3.06,556,3.06,557,3.06,558,3.06,559,3.06,560,3.06,561,3.06,562,3.06,563,5.456,564,3.06,565,3.06]],["title/controllers/UsersController.html",[0,1.044,566,2.31]],["body/controllers/UsersController.html",[0,0.656,2,0.656,3,0.141,4,0.123,5,0.123,7,0.388,8,1.312,10,1.323,11,0.024,12,0.901,14,1.605,15,1.155,16,0.439,17,0.445,20,0.141,21,0.069,23,0.97,24,2.155,26,0.012,27,0.012,59,1.41,65,1.21,99,1.214,104,1.214,105,1.214,106,1.321,107,1.214,116,3.564,120,1.972,122,1.837,123,1.83,124,1.241,162,1.45,163,2.746,164,2.245,188,2.737,194,1.879,210,1.45,220,3.436,221,2.045,227,2.54,230,3.811,295,1.122,328,2.736,355,2.817,357,3.36,372,2.245,375,3.811,408,1.45,447,2.829,448,2.829,449,1.828,450,1.828,456,1.828,457,2.829,566,2.245,567,1.828,568,3.337,569,4.083,570,3.337,571,2.156,572,2.156,573,2.156,574,5.666,575,2.156,576,3.337,577,3.337,578,3.337,579,2.156,580,3.337,581,3.337,582,4.597,583,3.337,584,2.156,585,3.337,586,3.337,587,2.156,588,3.337,589,3.337,590,2.829,591,4.083,592,2.156,593,2.829,594,2.156,595,2.156,596,4.083,597,2.156,598,1.828,599,1.828,600,1.828,601,4.083,602,2.156,603,2.156,604,2.156,605,1.828,606,2.156,607,2.156,608,2.156,609,2.156,610,2.156,611,2.156,612,2.156,613,2.156]],["title/modules/UsersModule.html",[28,1.044,44,1.787]],["body/modules/UsersModule.html",[2,1.48,3,0.238,4,0.207,5,0.207,11,0.024,16,0.525,17,0.75,20,0.238,21,0.116,26,0.017,27,0.017,28,1.669,30,1.525,31,1.633,32,1.889,33,1.889,34,1.633,35,2.857,36,2.857,40,2.74,44,3.347,45,2.533,46,1.889,47,1.754,49,2.441,55,2.713,56,2.044,57,1.754,112,3.273,120,3.284,566,3.693,600,3.077,614,3.077,615,3.077,616,3.077,617,3.63,618,3.63,619,3.63,620,3.077,621,3.63]],["title/injectables/UsersService.html",[90,1.186,120,1.659]],["body/injectables/UsersService.html",[3,0.143,4,0.125,5,0.125,7,0.393,8,1.323,11,0.025,12,1.021,14,1.616,15,1.256,16,0.459,17,0.45,20,0.143,21,0.07,23,0.981,24,1.616,26,0.012,27,0.012,56,1.228,57,2.414,64,3.074,65,1.021,87,1.467,90,1.162,91,1.135,100,1.849,101,2.865,104,1.895,105,1.895,106,1.336,107,1.895,112,1.467,116,3.576,117,1.849,120,1.626,122,2.081,123,1.703,124,1.406,128,1.703,130,3.362,133,1.849,134,2.517,143,1.728,144,2.315,188,2.66,194,2.315,230,2.766,328,2.601,331,3.457,355,2.834,357,2.063,372,1.467,405,1.228,408,1.467,474,3.457,478,1.849,482,1.849,490,2.854,593,2.854,598,1.849,599,1.849,620,1.849,622,1.849,623,3.367,624,3.367,625,2.18,626,4.624,627,2.18,628,3.367,629,2.18,630,3.367,631,2.18,632,4.112,633,2.18,634,3.367,635,2.18,636,2.18,637,2.18,638,2.18,639,3.367,640,2.18,641,2.18,642,2.18,643,2.18,644,3.367,645,3.367,646,2.18,647,1.849,648,2.18,649,2.18,650,2.18,651,2.18,652,2.18,653,2.18,654,2.18,655,4.112,656,2.18,657,2.18]],["title/coverage.html",[658,3.504]],["body/coverage.html",[0,1.783,1,1.765,5,0.15,6,2.224,11,0.024,18,1.477,21,0.205,26,0.013,27,0.013,34,1.18,57,1.267,59,1.336,65,0.579,90,1.957,92,2.224,97,1.765,98,2.224,101,1.365,115,2.224,120,1.267,137,1.765,139,2.224,140,1.765,141,2.224,149,1.365,159,1.608,166,1.477,185,2.224,194,1.477,197,2.224,198,2.894,199,1.608,200,2.894,201,2.894,217,1.608,291,1.765,308,2.224,312,1.477,313,2.224,314,2.894,328,1.365,329,2.224,330,2.894,355,1.608,356,2.224,357,1.608,358,2.224,362,1.765,363,2.224,375,1.765,376,2.224,380,2.372,381,2.224,416,1.765,417,2.224,445,1.477,472,2.224,492,1.765,493,2.224,499,1.608,500,2.224,521,1.765,522,2.224,528,1.608,530,1.477,543,2.224,549,2.224,551,2.224,553,2.224,566,1.765,567,2.224,622,2.224,658,1.961,659,2.224,660,2.623,661,2.623,662,6.918,663,5.079,664,6.249,665,5.079,666,5.417,667,2.224,668,2.623,669,2.623,670,2.623,671,2.623,672,2.623,673,2.623,674,2.623,675,2.623,676,2.623]],["title/dependencies.html",[31,1.859,677,2.431]],["body/dependencies.html",[11,0.025,17,0.9,21,0.175,26,0.019,27,0.019,31,1.961,56,2.454,288,2.268,290,3.258,295,2.268,378,3.258,379,3.258,405,2.454,678,4.358,679,4.358,680,5.996,681,4.358,682,4.358,683,4.358,684,4.358,685,4.358,686,4.358,687,4.358,688,4.358,689,4.358,690,4.358,691,4.358,692,4.358,693,4.358,694,4.358,695,4.358,696,4.358]],["title/miscellaneous/enumerations.html",[697,1.929,698,3.502]],["body/miscellaneous/enumerations.html",[7,0.778,11,0.024,26,0.019,27,0.019,59,1.881,206,4.074,230,3.665,231,4.62,263,4.074,264,4.62,265,4.62,266,4.62,298,4.62,301,4.62,307,5.069,697,2.905,698,3.661,699,5.45,700,5.45,701,5.45,702,5.45]],["title/miscellaneous/functions.html",[697,1.929,703,3.502]],["body/miscellaneous/functions.html",[7,0.944,11,0.021,26,0.021,27,0.021,34,2.924,667,4.445,697,3.526,703,4.445,704,5.243]],["title/index.html",[7,0.516,705,2.868,706,2.868]],["body/index.html",[4,0.132,11,0.023,26,0.012,27,0.012,47,2.609,75,4.909,82,2.98,86,1.956,195,1.552,227,1.114,228,1.956,239,3.56,306,1.724,474,1.724,485,2.98,590,1.956,605,4.579,647,4.579,658,1.724,659,2.98,707,2.307,708,2.307,709,4.259,710,3.515,711,2.307,712,2.307,713,2.307,714,2.307,715,3.515,716,4.259,717,2.307,718,2.307,719,4.763,720,2.307,721,5.79,722,2.307,723,5.617,724,2.307,725,2.307,726,2.307,727,3.515,728,2.307,729,2.307,730,4.259,731,2.307,732,2.307,733,2.307,734,2.307,735,2.307,736,2.307,737,4.763,738,3.515,739,2.307,740,2.307,741,2.307,742,2.307,743,3.515,744,4.763,745,2.307,746,3.515,747,2.307,748,3.515,749,5.402,750,4.763,751,2.307,752,3.515,753,2.307,754,2.307,755,2.307,756,2.307,757,4.763,758,2.307,759,2.307,760,2.307,761,2.307,762,3.515,763,2.307,764,2.307,765,2.307,766,2.307,767,2.307,768,3.515,769,2.307,770,2.307,771,2.307,772,3.515,773,2.307,774,2.307,775,4.038,776,3.515,777,2.307,778,2.307,779,2.307,780,2.307,781,2.307,782,2.307,783,2.307,784,2.307,785,3.515,786,2.307,787,1.956,788,2.307,789,2.307,790,4.259,791,2.307,792,2.307,793,2.307,794,2.307,795,2.307,796,2.307,797,3.515,798,2.307,799,2.307,800,2.307,801,2.307,802,3.515,803,2.307,804,2.307,805,2.307,806,3.515,807,3.515,808,2.307,809,2.307,810,2.307,811,2.307,812,2.307,813,2.307,814,2.307,815,2.307,816,2.307,817,2.307,818,1.956,819,2.307,820,2.307,821,2.307,822,2.307,823,2.307,824,2.307,825,1.956]],["title/modules.html",[30,1.97]],["body/modules.html",[11,0.02,26,0.02,27,0.02,29,3.071,30,1.918,40,2.571,41,2.798,42,2.798,43,2.798,44,2.376,496,3.413,775,5.675,787,3.871,826,6.694,827,6.694,828,6.785,829,4.566]],["title/overview.html",[830,3.975]],["body/overview.html",[2,0.984,11,0.024,18,2.913,26,0.016,27,0.016,28,0.984,29,4.549,30,1.36,31,1.456,32,1.684,33,1.684,34,1.456,35,1.684,36,1.684,37,2.744,38,2.744,39,2.744,40,3.425,41,3.601,42,3.824,43,3.601,44,3.248,45,2.342,46,1.684,47,1.563,77,2.177,91,1.684,101,3.248,108,2.744,109,2.744,110,2.744,120,3.015,138,1.117,166,2.913,181,2.744,182,2.744,445,2.913,465,2.744,467,2.744,487,2.744,530,2.913,539,2.744,540,2.744,614,2.744,615,2.744,616,2.744,830,2.744,831,4.5,832,3.236,833,3.236]],["title/properties.html",[202,1.624,677,2.431]],["body/properties.html",[11,0.024,26,0.021,27,0.021,202,2.027,227,2.492,818,4.373,825,4.373,834,5.158,835,5.158,836,5.158]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/UpdateCatDto.html":{},"classes/UpdateTagDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":662,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":835,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":688,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":693,"title":{},"body":{"dependencies.html":{}}}],["0.3.12",{"_index":696,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":687,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":664,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":671,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":670,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":663,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":669,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":665,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":672,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":666,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":367,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["1.1.23",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["1/5",{"_index":674,"title":{},"body":{"coverage.html":{}}}],["10.0.0",{"_index":680,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":686,"title":{},"body":{"dependencies.html":{}}}],["1024",{"_index":387,"title":{},"body":{"entities/Post.html":{},"classes/Tag.html":{}}}],["1024,nullable",{"_index":520,"title":{},"body":{"classes/Tag.html":{}}}],["12",{"_index":833,"title":{},"body":{"overview.html":{}}}],["1234",{"_index":646,"title":{},"body":{"injectables/UsersService.html":{}}}],["16t07:46:32+0000",{"_index":304,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["190",{"_index":512,"title":{},"body":{"classes/Tag.html":{}}}],["2",{"_index":487,"title":{},"body":{"injectables/PostsService.html":{},"overview.html":{}}}],["2.0.6",{"_index":682,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":673,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":588,"title":{},"body":{"controllers/UsersController.html":{}}}],["201",{"_index":426,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["255)@isstring",{"_index":319,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["256",{"_index":397,"title":{},"body":{"entities/Post.html":{}}}],["512",{"_index":402,"title":{},"body":{"entities/Post.html":{},"classes/Tag.html":{}}}],["5432",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["6",{"_index":832,"title":{},"body":{"overview.html":{}}}],["7",{"_index":831,"title":{},"body":{"overview.html":{}}}],["7.8.1",{"_index":695,"title":{},"body":{"dependencies.html":{}}}],["8.0.7",{"_index":685,"title":{},"body":{"dependencies.html":{}}}],["8.11.5",{"_index":690,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["96",{"_index":554,"title":{},"body":{"entities/User.html":{}}}],["action",{"_index":192,"title":{},"body":{"injectables/CatsService.html":{},"injectables/TagService.html":{}}}],["adds",{"_index":193,"title":{},"body":{"injectables/CatsService.html":{},"injectables/TagService.html":{}}}],["admin",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["alice",{"_index":644,"title":{},"body":{"injectables/UsersService.html":{}}}],["alice@doe.com",{"_index":645,"title":{},"body":{"injectables/UsersService.html":{}}}],["allowing",{"_index":763,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":812,"title":{},"body":{"index.html":{}}}],["api",{"_index":586,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":447,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":423,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":293,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty()@isstring()@minlength(4)@isnotempty",{"_index":273,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({description",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({enum",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiproperty({name",{"_index":366,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["apipropertyoptional",{"_index":294,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional()@isarray()@isoptional()@isstring({each",{"_index":269,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional()@isoptional()@isint()@type(undefined",{"_index":359,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional()@isoptional()@isstring",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional()@isoptional()@isurl",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional({description",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional({type",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":601,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":448,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":449,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":452,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":603,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":605,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application.'})@apiquery({name",{"_index":579,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":715,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["async",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"injectables/UsersService.html":{}}}],["auth.controller",{"_index":113,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":97,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":40,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":818,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":101,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":829,"title":{},"body":{"modules.html":{}}}],["await",{"_index":490,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["aws",{"_index":752,"title":{},"body":{"index.html":{}}}],["backers",{"_index":813,"title":{},"body":{"index.html":{}}}],["based",{"_index":590,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["blog",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"controllers/PostsController.html":{}}}],["blog.'})@apiresponse({status",{"_index":425,"title":{},"body":{"controllers/PostsController.html":{}}}],["board",{"_index":805,"title":{},"body":{"index.html":{}}}],["body",{"_index":162,"title":{},"body":{"controllers/CatsController.html":{},"controllers/PostsController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatsModule.html":{},"modules/PostsModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":828,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":826,"title":{},"body":{"modules.html":{}}}],["building",{"_index":710,"title":{},"body":{"index.html":{}}}],["cat",{"_index":137,"title":{"classes/Cat.html":{}},"body":{"classes/Cat.html":{},"injectables/CatsService.html":{},"coverage.html":{}}}],["cat.dto",{"_index":169,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{},"injectables/PostsService.html":{},"classes/UpdateCatDto.html":{}}}],["cat.dto.ts",{"_index":198,"title":{},"body":{"classes/CreateCatDto.html":{},"classes/UpdateCatDto.html":{},"coverage.html":{}}}],["cats",{"_index":142,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{}}}],["cats.controller",{"_index":184,"title":{},"body":{"modules/CatsModule.html":{}}}],["cats.service",{"_index":167,"title":{},"body":{"controllers/CatsController.html":{},"modules/CatsModule.html":{}}}],["cats/cats.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["cats/dto/create",{"_index":481,"title":{},"body":{"injectables/PostsService.html":{}}}],["catscontroller",{"_index":140,"title":{"controllers/CatsController.html":{}},"body":{"controllers/CatsController.html":{},"modules/CatsModule.html":{},"coverage.html":{}}}],["catsmodule",{"_index":41,"title":{"modules/CatsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CatsModule.html":{},"modules.html":{},"overview.html":{}}}],["catsservice",{"_index":166,"title":{"injectables/CatsService.html":{}},"body":{"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"coverage.html":{},"overview.html":{}}}],["channel",{"_index":778,"title":{},"body":{"index.html":{}}}],["character",{"_index":349,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["characters",{"_index":345,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":647,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["class",{"_index":21,"title":{"classes/Cat.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Tag.html":{},"classes/UpdateCatDto.html":{},"classes/UpdateTagDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/UpdateCatDto.html":{},"classes/UpdateTagDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":138,"title":{},"body":{"classes/Cat.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/Tag.html":{},"classes/UpdateCatDto.html":{},"classes/UpdateTagDto.html":{},"overview.html":{}}}],["clicks",{"_index":762,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":747,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":108,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":109,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":110,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_catsmodule",{"_index":181,"title":{},"body":{"modules/CatsModule.html":{},"overview.html":{}}}],["cluster_catsmodule_providers",{"_index":182,"title":{},"body":{"modules/CatsModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":465,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":466,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":467,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_tagmodule",{"_index":539,"title":{},"body":{"modules/TagModule.html":{},"overview.html":{}}}],["cluster_tagmodule_providers",{"_index":540,"title":{},"body":{"modules/TagModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":614,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":616,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":615,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":404,"title":{},"body":{"entities/Post.html":{},"classes/Tag.html":{},"entities/User.html":{}}}],["column({type",{"_index":382,"title":{},"body":{"entities/Post.html":{},"classes/Tag.html":{},"entities/User.html":{}}}],["come",{"_index":769,"title":{},"body":{"index.html":{}}}],["compodoc/compodoc",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["configmodule",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log(createpostdto",{"_index":459,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(isauth",{"_index":641,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(patchpostdto",{"_index":463,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(authservice",{"_index":625,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/CatsController.html":{},"controllers/TagController.html":{}}}],["constructor(usersservice",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["content",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CatsController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CatsController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('cats",{"_index":171,"title":{},"body":{"controllers/CatsController.html":{}}}],["controller('posts",{"_index":451,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('products",{"_index":495,"title":{},"body":{"controllers/ProductsController.html":{}}}],["controller('tag",{"_index":533,"title":{},"body":{"controllers/TagController.html":{}}}],["controller('users",{"_index":602,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":784,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":658,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":143,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"classes/UpdateCatDto.html":{},"classes/UpdateTagDto.html":{},"injectables/UsersService.html":{}}}],["create(@body",{"_index":172,"title":{},"body":{"controllers/CatsController.html":{},"controllers/TagController.html":{}}}],["create(createcatdto",{"_index":148,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{}}}],["create(createtagdto",{"_index":523,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["createcatdto",{"_index":149,"title":{"classes/CreateCatDto.html":{}},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"injectables/PostsService.html":{},"classes/UpdateCatDto.html":{},"coverage.html":{}}}],["created",{"_index":429,"title":{},"body":{"controllers/PostsController.html":{}}}],["createdat",{"_index":501,"title":{},"body":{"classes/Tag.html":{}}}],["createdatecolumn",{"_index":504,"title":{},"body":{"classes/Tag.html":{}}}],["createpost",{"_index":419,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(@body",{"_index":458,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createcatdto",{"_index":476,"title":{},"body":{"injectables/PostsService.html":{}}}],["createpost(createpostdto",{"_index":422,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":199,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["createpostmetaoptionsdto",{"_index":217,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/Post.html":{},"coverage.html":{}}}],["creates",{"_index":424,"title":{},"body":{"controllers/PostsController.html":{}}}],["createtagdto",{"_index":312,"title":{"classes/CreateTagDto.html":{}},"body":{"classes/CreateTagDto.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"classes/UpdateTagDto.html":{},"coverage.html":{}}}],["createuser",{"_index":623,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(createuserdto",{"_index":628,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto",{"_index":328,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto.email",{"_index":652,"title":{},"body":{"injectables/UsersService.html":{}}}],["createusers",{"_index":568,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(@body",{"_index":611,"title":{},"body":{"controllers/UsersController.html":{}}}],["createusers(createuserdto",{"_index":571,"title":{},"body":{"controllers/UsersController.html":{}}}],["database",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"classes/Tag.html":{}}}],["datetime",{"_index":411,"title":{},"body":{"entities/Post.html":{}}}],["ddd",{"_index":96,"title":{},"body":{"injectables/AppService.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatsModule.html":{},"modules/PostsModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/CatsController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":780,"title":{},"body":{"index.html":{}}}],["default",{"_index":392,"title":{},"body":{"entities/Post.html":{}}}],["defaultvaluepipe",{"_index":597,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":609,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":607,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":165,"title":{},"body":{"controllers/CatsController.html":{},"controllers/TagController.html":{}}}],["delete(':id",{"_index":156,"title":{},"body":{"controllers/CatsController.html":{},"controllers/TagController.html":{}}}],["deletedat",{"_index":502,"title":{},"body":{"classes/Tag.html":{}}}],["deletedatecolumn",{"_index":506,"title":{},"body":{"classes/Tag.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatsModule.html":{},"modules/PostsModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deploy",{"_index":737,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":751,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":743,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":761,"title":{},"body":{"index.html":{}}}],["description",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"classes/Tag.html":{},"controllers/UsersController.html":{},"index.html":{},"properties.html":{}}}],["description:'thas",{"_index":461,"title":{},"body":{"controllers/PostsController.html":{}}}],["development",{"_index":724,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":792,"title":{},"body":{"index.html":{}}}],["disable",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["discord",{"_index":777,"title":{},"body":{"index.html":{}}}],["dive",{"_index":779,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":659,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto/create",{"_index":168,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["dto/update",{"_index":170,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["dtos/create",{"_index":408,"title":{},"body":{"entities/Post.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/get",{"_index":598,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":450,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":732,"title":{},"body":{"index.html":{}}}],["each",{"_index":271,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":711,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":742,"title":{},"body":{"index.html":{}}}],["eight",{"_index":344,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["email",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["ensure",{"_index":740,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":796,"title":{},"body":{"index.html":{}}}],["entities",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"entities/Post.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":380,"title":{"entities/Post.html":{},"entities/User.html":{}},"body":{"entities/Post.html":{},"entities/User.html":{},"coverage.html":{}}}],["enum",{"_index":297,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["enumerations",{"_index":698,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/post",{"_index":275,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["error",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"index.html":{}}}],["exception",{"_index":654,"title":{},"body":{"injectables/UsersService.html":{}}}],["existance",{"_index":649,"title":{},"body":{"injectables/UsersService.html":{}}}],["experience",{"_index":782,"title":{},"body":{"index.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/UpdateCatDto.html":{},"classes/UpdateTagDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatsModule.html":{},"modules/PostsModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":684,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":364,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/UpdateCatDto.html":{},"classes/UpdateTagDto.html":{}}}],["false",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"classes/Tag.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["false})@apiquery({name",{"_index":584,"title":{},"body":{"controllers/UsersController.html":{}}}],["false})@apiresponse({status",{"_index":587,"title":{},"body":{"controllers/UsersController.html":{}}}],["fast",{"_index":755,"title":{},"body":{"index.html":{}}}],["featuredimageurl",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"classes/Tag.html":{}}}],["features",{"_index":765,"title":{},"body":{"index.html":{}}}],["fetched",{"_index":589,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":576,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":757,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/UpdateCatDto.html":{},"classes/UpdateTagDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["find",{"_index":639,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall",{"_index":144,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{},"injectables/PostsService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}}}],["findall(getuserparamdto",{"_index":631,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":479,"title":{},"body":{"injectables/PostsService.html":{}}}],["findone",{"_index":145,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["findone(@param('id",{"_index":175,"title":{},"body":{"controllers/CatsController.html":{},"controllers/TagController.html":{}}}],["findone(id",{"_index":152,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["findonebyid",{"_index":624,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":634,"title":{},"body":{"injectables/UsersService.html":{}}}],["firstname",{"_index":331,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["focus",{"_index":764,"title":{},"body":{"index.html":{}}}],["follow",{"_index":799,"title":{},"body":{"index.html":{}}}],["forwardref",{"_index":112,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":709,"title":{},"body":{"index.html":{}}}],["full",{"_index":795,"title":{},"body":{"index.html":{}}}],["function",{"_index":668,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":703,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["future",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["g",{"_index":760,"title":{},"body":{"index.html":{}}}],["generated",{"_index":561,"title":{},"body":{"entities/User.html":{}}}],["get('/:id",{"_index":604,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":575,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":434,"title":{},"body":{"controllers/PostsController.html":{}}}],["get(':id",{"_index":153,"title":{},"body":{"controllers/CatsController.html":{},"controllers/TagController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getposts",{"_index":420,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":454,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":433,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":705,"title":{"index.html":{}},"body":{}}],["getuserparamdto",{"_index":593,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["getusers",{"_index":569,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getuserparamdto",{"_index":573,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":355,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["go",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["graph",{"_index":787,"title":{},"body":{"index.html":{},"modules.html":{}}}],["grow",{"_index":809,"title":{},"body":{"index.html":{}}}],["handle",{"_index":653,"title":{},"body":{"injectables/UsersService.html":{}}}],["hands",{"_index":781,"title":{},"body":{"index.html":{}}}],["handy",{"_index":770,"title":{},"body":{"index.html":{}}}],["hello",{"_index":94,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":785,"title":{},"body":{"index.html":{}}}],["here",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["host",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["https://nestjs.com",{"_index":822,"title":{},"body":{"index.html":{}}}],["id",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CreateTagDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["id:number",{"_index":374,"title":{},"body":{"classes/PatchPostDto.html":{},"entities/User.html":{}}}],["identifier",{"_index":660,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/UpdateCatDto.html":{},"classes/UpdateTagDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/UpdateCatDto.html":{},"classes/UpdateTagDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":745,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":767,"title":{},"body":{"index.html":{}}}],["inject",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["injectable",{"_index":90,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CatsService.html":{},"injectables/PostsService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CatsService.html":{},"injectables/PostsService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":91,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CatsService.html":{},"injectables/PostsService.html":{},"injectables/TagService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["injections",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["injectrepository",{"_index":482,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(post",{"_index":483,"title":{},"body":{"injectables/PostsService.html":{}}}],["injectrepository(user",{"_index":637,"title":{},"body":{"injectables/UsersService.html":{}}}],["install",{"_index":759,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":722,"title":{},"body":{"index.html":{}}}],["instance",{"_index":630,"title":{},"body":{"injectables/UsersService.html":{}}}],["instanceof",{"_index":464,"title":{},"body":{"controllers/PostsController.html":{}}}],["interact",{"_index":788,"title":{},"body":{"index.html":{}}}],["isarray",{"_index":277,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isemail",{"_index":351,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty",{"_index":333,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":278,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":302,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":299,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isexist",{"_index":650,"title":{},"body":{"injectables/UsersService.html":{}}}],["isint",{"_index":361,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":279,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":280,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":281,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["isnotempty()@length(3",{"_index":318,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["isnotempty()@maxlength(512)@isstring",{"_index":322,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["iso8601",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":282,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isstring",{"_index":283,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":309,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":335,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/^(?=.*[a",{"_index":339,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":337,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isurl",{"_index":316,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["isurl",{"_index":284,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{}}}],["items",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["job",{"_index":802,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":804,"title":{},"body":{"index.html":{}}}],["john",{"_index":642,"title":{},"body":{"injectables/UsersService.html":{}}}],["john@doe.com",{"_index":643,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":815,"title":{},"body":{"index.html":{}}}],["json",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["kamil",{"_index":819,"title":{},"body":{"index.html":{}}}],["key",{"_index":306,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"index.html":{}}}],["lastname",{"_index":332,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["learn",{"_index":773,"title":{},"body":{"index.html":{}}}],["lecture",{"_index":414,"title":{},"body":{"entities/Post.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatsModule.html":{},"modules/PostsModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":324,"title":{},"body":{"classes/CreateTagDto.html":{},"entities/Post.html":{},"classes/Tag.html":{},"entities/User.html":{}}}],["length(3,255",{"_index":326,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["letter",{"_index":347,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["license",{"_index":825,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":807,"title":{},"body":{"index.html":{}}}],["limit",{"_index":574,"title":{},"body":{"controllers/UsersController.html":{}}}],["limt",{"_index":632,"title":{},"body":{"injectables/UsersService.html":{}}}],["linkedin",{"_index":801,"title":{},"body":{"index.html":{}}}],["list",{"_index":577,"title":{},"body":{"controllers/UsersController.html":{}}}],["localhost",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["localhost:3000/posts/:userid",{"_index":453,"title":{},"body":{"controllers/PostsController.html":{}}}],["login",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":746,"title":{},"body":{"index.html":{}}}],["loop",{"_index":798,"title":{},"body":{"index.html":{}}}],["makes",{"_index":753,"title":{},"body":{"index.html":{}}}],["managing",{"_index":766,"title":{},"body":{"index.html":{}}}],["matches",{"_index":285,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":354,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":300,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/UpdateCatDto.html":{},"classes/UpdateTagDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["mau",{"_index":749,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":325,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{}}}],["maxlength(512",{"_index":327,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["maxlength(96",{"_index":352,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["mean",{"_index":442,"title":{},"body":{"controllers/PostsController.html":{}}}],["message",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":291,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/Post.html":{},"coverage.html":{}}}],["metadata",{"_index":692,"title":{},"body":{"dependencies.html":{}}}],["metaoptions",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["method",{"_index":638,"title":{},"body":{"injectables/UsersService.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minimum",{"_index":343,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength",{"_index":286,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":305,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":296,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":353,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":697,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":806,"title":{},"body":{"index.html":{}}}],["mode",{"_index":727,"title":{},"body":{"index.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatsModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatsModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatsModule.html":{},"modules/PostsModule.html":{},"modules/ProductsModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":744,"title":{},"body":{"index.html":{}}}],["mysql",{"_index":412,"title":{},"body":{"entities/Post.html":{}}}],["myśliwiec",{"_index":820,"title":{},"body":{"index.html":{}}}],["name",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CreateTagDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":793,"title":{},"body":{"index.html":{}}}],["nest",{"_index":716,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":824,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":681,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":378,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UpdateCatDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":683,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":295,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"classes/UpdateTagDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":194,"title":{},"body":{"injectables/CatsService.html":{},"controllers/PostsController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newpost",{"_index":488,"title":{},"body":{"injectables/PostsService.html":{}}}],["newuser",{"_index":655,"title":{},"body":{"injectables/UsersService.html":{}}}],["node.js",{"_index":708,"title":{},"body":{"index.html":{}}}],["npm",{"_index":721,"title":{},"body":{"index.html":{}}}],["nullable",{"_index":384,"title":{},"body":{"entities/Post.html":{},"classes/Tag.html":{},"entities/User.html":{}}}],["number",{"_index":188,"title":{},"body":{"injectables/CatsService.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["offer",{"_index":803,"title":{},"body":{"index.html":{}}}],["official",{"_index":750,"title":{},"body":{"index.html":{}}}],["one",{"_index":346,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["open",{"_index":808,"title":{},"body":{"index.html":{}}}],["operation",{"_index":438,"title":{},"body":{"controllers/PostsController.html":{}}}],["optional",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options.dto",{"_index":292,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["options.dto.ts",{"_index":308,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":310,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.dto.ts:9",{"_index":311,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["out",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatsModule.html":{},"modules/PostsModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":830,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":677,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["pages",{"_index":581,"title":{},"body":{"controllers/UsersController.html":{}}}],["pagination",{"_index":583,"title":{},"body":{"controllers/UsersController.html":{}}}],["param",{"_index":164,"title":{},"body":{"controllers/CatsController.html":{},"controllers/PostsController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["param.dto",{"_index":599,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":358,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:11",{"_index":360,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":596,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":794,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":370,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"classes/UpdateCatDto.html":{},"classes/UpdateTagDto.html":{}}}],["partialtype(createcatdto",{"_index":550,"title":{},"body":{"classes/UpdateCatDto.html":{}}}],["partialtype(createpostdto",{"_index":365,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createtagdto",{"_index":552,"title":{},"body":{"classes/UpdateTagDto.html":{}}}],["partialtype(createuserdto",{"_index":377,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["password",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["password:string",{"_index":565,"title":{},"body":{"entities/User.html":{}}}],["patch",{"_index":163,"title":{},"body":{"controllers/CatsController.html":{},"controllers/PostsController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":160,"title":{},"body":{"controllers/CatsController.html":{},"controllers/TagController.html":{}}}],["patchpostdto",{"_index":362,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchuser",{"_index":570,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":613,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":594,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":375,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["pg",{"_index":689,"title":{},"body":{"dependencies.html":{}}}],["platform",{"_index":748,"title":{},"body":{"index.html":{}}}],["please",{"_index":776,"title":{},"body":{"index.html":{}}}],["port",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["position",{"_index":585,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":59,"title":{"entities/Post.html":{}},"body":{"modules/AppModule.html":{},"controllers/CatsController.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":440,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@patch",{"_index":443,"title":{},"body":{"controllers/PostsController.html":{}}}],["post.dto",{"_index":373,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["post.dto.ts",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:107",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:15",{"_index":369,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:26",{"_index":274,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:34",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:45",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:53",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:58",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:66",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:71",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:79",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:86",{"_index":272,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.entity",{"_index":470,"title":{},"body":{"modules/PostsModule.html":{},"injectables/PostsService.html":{}}}],["postgres",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["postrepository",{"_index":473,"title":{},"body":{"injectables/PostsService.html":{}}}],["posts",{"_index":418,"title":{},"body":{"controllers/PostsController.html":{}}}],["posts.controller",{"_index":469,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/post.entity",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["posts/posts.module",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":416,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":42,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":445,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["poststatus.draft",{"_index":410,"title":{},"body":{"entities/Post.html":{}}}],["posttype",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"miscellaneous/enumerations.html":{}}}],["posttype.post",{"_index":409,"title":{},"body":{"entities/Post.html":{}}}],["prefix",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CatsController.html":{},"controllers/PostsController.html":{},"controllers/ProductsController.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{}}}],["primarygeneratedcolumn",{"_index":389,"title":{},"body":{"entities/Post.html":{},"classes/Tag.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn(\"uuid",{"_index":562,"title":{},"body":{"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":510,"title":{},"body":{"classes/Tag.html":{},"entities/User.html":{}}}],["private",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["production",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["products",{"_index":494,"title":{},"body":{"controllers/ProductsController.html":{}}}],["products.controller",{"_index":498,"title":{},"body":{"modules/ProductsModule.html":{}}}],["productscontroller",{"_index":492,"title":{"controllers/ProductsController.html":{}},"body":{"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"coverage.html":{}}}],["productsmodule",{"_index":496,"title":{"modules/ProductsModule.html":{}},"body":{"modules/ProductsModule.html":{},"modules.html":{}}}],["progressive",{"_index":707,"title":{},"body":{"index.html":{}}}],["project",{"_index":719,"title":{},"body":{"index.html":{}}}],["properties",{"_index":202,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"classes/Tag.html":{},"entities/User.html":{},"properties.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatsModule.html":{},"modules/PostsModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/posts.service",{"_index":446,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/users.service",{"_index":600,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":301,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["published''})@isenum(poststatus)@isnotempty",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishon",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["query",{"_index":591,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":606,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":608,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":774,"title":{},"body":{"index.html":{}}}],["read",{"_index":816,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CatsController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["ready",{"_index":736,"title":{},"body":{"index.html":{}}}],["real",{"_index":789,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":691,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":578,"title":{},"body":{"controllers/UsersController.html":{}}}],["relationships",{"_index":415,"title":{},"body":{"entities/Post.html":{}}}],["remove",{"_index":146,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["remove(@param('id",{"_index":179,"title":{},"body":{"controllers/CatsController.html":{},"controllers/TagController.html":{}}}],["remove(id",{"_index":155,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["removes",{"_index":196,"title":{},"body":{"injectables/CatsService.html":{},"injectables/TagService.html":{}}}],["repository",{"_index":474,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["request",{"_index":406,"title":{},"body":{"entities/Post.html":{}}}],["required",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":756,"title":{},"body":{"index.html":{}}}],["reset",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatsModule.html":{},"modules/PostsModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":768,"title":{},"body":{"index.html":{}}}],["response",{"_index":428,"title":{},"body":{"controllers/PostsController.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/UpdateCatDto.html":{},"classes/UpdateTagDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["run",{"_index":723,"title":{},"body":{"index.html":{}}}],["runs",{"_index":741,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":694,"title":{},"body":{"dependencies.html":{}}}],["sample_token",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["scalable",{"_index":712,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"classes/Tag.html":{}}}],["serialize",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":298,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["series''})@isenum(posttype)@isnotempty",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["server",{"_index":713,"title":{},"body":{"index.html":{}}}],["service",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["setup",{"_index":720,"title":{},"body":{"index.html":{}}}],["side",{"_index":714,"title":{},"body":{"index.html":{}}}],["simple",{"_index":758,"title":{},"body":{"index.html":{}}}],["slug",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateTagDto.html":{},"entities/Post.html":{},"classes/Tag.html":{}}}],["small",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Cat.html":{},"controllers/CatsController.html":{},"modules/CatsModule.html":{},"injectables/CatsService.html":{},"classes/CreateCatDto.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/ProductsController.html":{},"modules/ProductsModule.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"classes/UpdateCatDto.html":{},"classes/UpdateTagDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["special",{"_index":348,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["sponsors",{"_index":811,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":704,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../post",{"_index":699,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":92,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:6",{"_index":93,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":618,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":111,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":636,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:13",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:19",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:6",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/cats/cats.controller.ts",{"_index":141,"title":{},"body":{"controllers/CatsController.html":{},"coverage.html":{}}}],["src/cats/cats.controller.ts:11",{"_index":150,"title":{},"body":{"controllers/CatsController.html":{}}}],["src/cats/cats.controller.ts:16",{"_index":151,"title":{},"body":{"controllers/CatsController.html":{}}}],["src/cats/cats.controller.ts:21",{"_index":154,"title":{},"body":{"controllers/CatsController.html":{}}}],["src/cats/cats.controller.ts:26",{"_index":161,"title":{},"body":{"controllers/CatsController.html":{}}}],["src/cats/cats.controller.ts:31",{"_index":157,"title":{},"body":{"controllers/CatsController.html":{}}}],["src/cats/cats.module.ts",{"_index":183,"title":{},"body":{"modules/CatsModule.html":{}}}],["src/cats/cats.service.ts",{"_index":185,"title":{},"body":{"injectables/CatsService.html":{},"coverage.html":{}}}],["src/cats/cats.service.ts:11",{"_index":187,"title":{},"body":{"injectables/CatsService.html":{}}}],["src/cats/cats.service.ts:15",{"_index":189,"title":{},"body":{"injectables/CatsService.html":{}}}],["src/cats/cats.service.ts:19",{"_index":191,"title":{},"body":{"injectables/CatsService.html":{}}}],["src/cats/cats.service.ts:23",{"_index":190,"title":{},"body":{"injectables/CatsService.html":{}}}],["src/cats/cats.service.ts:7",{"_index":186,"title":{},"body":{"injectables/CatsService.html":{}}}],["src/cats/dto/create",{"_index":197,"title":{},"body":{"classes/CreateCatDto.html":{},"coverage.html":{}}}],["src/cats/dto/update",{"_index":549,"title":{},"body":{"classes/UpdateCatDto.html":{},"coverage.html":{}}}],["src/cats/entities/cat.entity.ts",{"_index":139,"title":{},"body":{"classes/Cat.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":667,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":363,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/post",{"_index":702,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/post.entity.ts",{"_index":381,"title":{},"body":{"entities/Post.html":{},"coverage.html":{}}}],["src/posts/post.entity.ts:10",{"_index":390,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:17",{"_index":403,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:25",{"_index":394,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:33",{"_index":399,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:41",{"_index":400,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:47",{"_index":385,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:53",{"_index":396,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:60",{"_index":388,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:66",{"_index":395,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:69",{"_index":401,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/post.entity.ts:70",{"_index":391,"title":{},"body":{"entities/Post.html":{}}}],["src/posts/posts.controller.ts",{"_index":417,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:21",{"_index":435,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:34",{"_index":431,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:44",{"_index":444,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":468,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":472,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:22",{"_index":480,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:39",{"_index":477,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:9",{"_index":475,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/products/products.controller.ts",{"_index":493,"title":{},"body":{"controllers/ProductsController.html":{},"coverage.html":{}}}],["src/products/products.module.ts",{"_index":497,"title":{},"body":{"modules/ProductsModule.html":{}}}],["src/tag/dto/create",{"_index":313,"title":{},"body":{"classes/CreateTagDto.html":{},"coverage.html":{}}}],["src/tag/dto/update",{"_index":551,"title":{},"body":{"classes/UpdateTagDto.html":{},"coverage.html":{}}}],["src/tag/entities/tag.entity.ts",{"_index":500,"title":{},"body":{"classes/Tag.html":{},"coverage.html":{}}}],["src/tag/entities/tag.entity.ts:17",{"_index":511,"title":{},"body":{"classes/Tag.html":{}}}],["src/tag/entities/tag.entity.ts:19",{"_index":513,"title":{},"body":{"classes/Tag.html":{}}}],["src/tag/entities/tag.entity.ts:22",{"_index":515,"title":{},"body":{"classes/Tag.html":{}}}],["src/tag/entities/tag.entity.ts:25",{"_index":508,"title":{},"body":{"classes/Tag.html":{}}}],["src/tag/entities/tag.entity.ts:28",{"_index":514,"title":{},"body":{"classes/Tag.html":{}}}],["src/tag/entities/tag.entity.ts:31",{"_index":509,"title":{},"body":{"classes/Tag.html":{}}}],["src/tag/entities/tag.entity.ts:34",{"_index":505,"title":{},"body":{"classes/Tag.html":{}}}],["src/tag/entities/tag.entity.ts:36",{"_index":517,"title":{},"body":{"classes/Tag.html":{}}}],["src/tag/entities/tag.entity.ts:38",{"_index":507,"title":{},"body":{"classes/Tag.html":{}}}],["src/tag/tag.controller.ts",{"_index":522,"title":{},"body":{"controllers/TagController.html":{},"coverage.html":{}}}],["src/tag/tag.controller.ts:11",{"_index":524,"title":{},"body":{"controllers/TagController.html":{}}}],["src/tag/tag.controller.ts:16",{"_index":525,"title":{},"body":{"controllers/TagController.html":{}}}],["src/tag/tag.controller.ts:21",{"_index":526,"title":{},"body":{"controllers/TagController.html":{}}}],["src/tag/tag.controller.ts:26",{"_index":529,"title":{},"body":{"controllers/TagController.html":{}}}],["src/tag/tag.controller.ts:31",{"_index":527,"title":{},"body":{"controllers/TagController.html":{}}}],["src/tag/tag.module.ts",{"_index":541,"title":{},"body":{"modules/TagModule.html":{}}}],["src/tag/tag.service.ts",{"_index":543,"title":{},"body":{"injectables/TagService.html":{},"coverage.html":{}}}],["src/tag/tag.service.ts:11",{"_index":545,"title":{},"body":{"injectables/TagService.html":{}}}],["src/tag/tag.service.ts:15",{"_index":546,"title":{},"body":{"injectables/TagService.html":{}}}],["src/tag/tag.service.ts:19",{"_index":548,"title":{},"body":{"injectables/TagService.html":{}}}],["src/tag/tag.service.ts:23",{"_index":547,"title":{},"body":{"injectables/TagService.html":{}}}],["src/tag/tag.service.ts:7",{"_index":544,"title":{},"body":{"injectables/TagService.html":{}}}],["src/users/dtos/create",{"_index":329,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":356,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":376,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["src/users/providers/users.service.ts",{"_index":622,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:10",{"_index":627,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:24",{"_index":633,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:47",{"_index":635,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:58",{"_index":629,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/user.entity.ts",{"_index":553,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/user.entity.ts:15",{"_index":556,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:21",{"_index":558,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:28",{"_index":555,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:34",{"_index":559,"title":{},"body":{"entities/User.html":{}}}],["src/users/user.entity.ts:9",{"_index":557,"title":{},"body":{"entities/User.html":{}}}],["src/users/users.controller.ts",{"_index":567,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:47",{"_index":592,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:56",{"_index":572,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:61",{"_index":595,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":114,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":617,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":725,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":728,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":729,"title":{},"body":{"index.html":{}}}],["started",{"_index":706,"title":{"index.html":{}},"body":{}}],["starter",{"_index":718,"title":{},"body":{"index.html":{}}}],["statements",{"_index":661,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["status.enum",{"_index":276,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["status.enum.ts",{"_index":700,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["status:201",{"_index":460,"title":{},"body":{"controllers/PostsController.html":{}}}],["stay",{"_index":797,"title":{},"body":{"index.html":{}}}],["steps",{"_index":738,"title":{},"body":{"index.html":{}}}],["story",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":754,"title":{},"body":{"index.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["success",{"_index":427,"title":{},"body":{"controllers/PostsController.html":{}}}],["successfully",{"_index":457,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["successfully'})@post",{"_index":430,"title":{},"body":{"controllers/PostsController.html":{}}}],["summary",{"_index":456,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["supertest",{"_index":407,"title":{},"body":{"entities/Post.html":{}}}],["support",{"_index":775,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":827,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":676,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":675,"title":{},"body":{"coverage.html":{}}}],["tag",{"_index":499,"title":{"classes/Tag.html":{}},"body":{"classes/Tag.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"coverage.html":{}}}],["tag.controller",{"_index":542,"title":{},"body":{"modules/TagModule.html":{}}}],["tag.dto",{"_index":532,"title":{},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{},"classes/UpdateTagDto.html":{}}}],["tag.dto.ts",{"_index":314,"title":{},"body":{"classes/CreateTagDto.html":{},"classes/UpdateTagDto.html":{},"coverage.html":{}}}],["tag.dto.ts:14",{"_index":320,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:19",{"_index":323,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:23",{"_index":315,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:27",{"_index":321,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.dto.ts:31",{"_index":317,"title":{},"body":{"classes/CreateTagDto.html":{}}}],["tag.service",{"_index":531,"title":{},"body":{"controllers/TagController.html":{},"modules/TagModule.html":{}}}],["tag/tag.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["tagcontroller",{"_index":521,"title":{"controllers/TagController.html":{}},"body":{"controllers/TagController.html":{},"modules/TagModule.html":{},"coverage.html":{}}}],["tagmodule",{"_index":43,"title":{"modules/TagModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TagModule.html":{},"modules.html":{},"overview.html":{}}}],["tags",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["tagservice",{"_index":530,"title":{"injectables/TagService.html":{}},"body":{"controllers/TagController.html":{},"modules/TagModule.html":{},"injectables/TagService.html":{},"coverage.html":{},"overview.html":{}}}],["take",{"_index":739,"title":{},"body":{"index.html":{}}}],["test",{"_index":485,"title":{},"body":{"injectables/PostsService.html":{},"index.html":{}}}],["test:covdeployment",{"_index":734,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":733,"title":{},"body":{"index.html":{}}}],["tests",{"_index":730,"title":{},"body":{"index.html":{}}}],["text",{"_index":383,"title":{},"body":{"entities/Post.html":{},"classes/Tag.html":{}}}],["text',nullable",{"_index":519,"title":{},"body":{"classes/Tag.html":{}}}],["thanks",{"_index":810,"title":{},"body":{"index.html":{}}}],["thas",{"_index":441,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.isauth",{"_index":640,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.catsservice.create(createcatdto",{"_index":173,"title":{},"body":{"controllers/CatsController.html":{}}}],["this.catsservice.findall",{"_index":174,"title":{},"body":{"controllers/CatsController.html":{}}}],["this.catsservice.findone(+id",{"_index":176,"title":{},"body":{"controllers/CatsController.html":{}}}],["this.catsservice.remove(+id",{"_index":180,"title":{},"body":{"controllers/CatsController.html":{}}}],["this.catsservice.update(+id",{"_index":178,"title":{},"body":{"controllers/CatsController.html":{}}}],["this.postrepository.create(createcatdto",{"_index":489,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postrepository.save(newpost",{"_index":491,"title":{},"body":{"injectables/PostsService.html":{}}}],["this.postsservice.findall(userid",{"_index":455,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.tagservice.create(createtagdto",{"_index":534,"title":{},"body":{"controllers/TagController.html":{}}}],["this.tagservice.findall",{"_index":535,"title":{},"body":{"controllers/TagController.html":{}}}],["this.tagservice.findone(+id",{"_index":536,"title":{},"body":{"controllers/TagController.html":{}}}],["this.tagservice.remove(+id",{"_index":538,"title":{},"body":{"controllers/TagController.html":{}}}],["this.tagservice.update(+id",{"_index":537,"title":{},"body":{"controllers/TagController.html":{}}}],["this.userrepository.create(createuserdto",{"_index":656,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":651,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(newuser",{"_index":657,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.createuser(createuserdto",{"_index":612,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall(getuserparamdto",{"_index":610,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid('1234",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":484,"title":{},"body":{"injectables/PostsService.html":{}}}],["thrown",{"_index":303,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["thrown'})@isoptional()@isjson",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tile",{"_index":486,"title":{},"body":{"injectables/PostsService.html":{}}}],["time",{"_index":790,"title":{},"body":{"index.html":{}}}],["timestamp",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["title",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{},"injectables/PostsService.html":{}}}],["touch",{"_index":817,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":290,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"classes/Tag.html":{},"entities/User.html":{}}}],["true})@isnotempty()@isint",{"_index":368,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["true})@minlength(3",{"_index":270,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":823,"title":{},"body":{"index.html":{}}}],["type",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"entities/Post.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"classes/Tag.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["type.enum",{"_index":289,"title":{},"body":{"classes/CreatePostDto.html":{},"entities/Post.html":{}}}],["type.enum.ts",{"_index":701,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["type:'varchar",{"_index":563,"title":{},"body":{"entities/User.html":{}}}],["typeorm",{"_index":405,"title":{},"body":{"entities/Post.html":{},"injectables/PostsService.html":{},"classes/Tag.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([post",{"_index":471,"title":{},"body":{"modules/PostsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":621,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["types",{"_index":379,"title":{},"body":{"classes/PatchUserDto.html":{},"classes/UpdateCatDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":717,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":393,"title":{},"body":{"entities/Post.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unique",{"_index":398,"title":{},"body":{"entities/Post.html":{},"classes/Tag.html":{},"entities/User.html":{}}}],["unique:true",{"_index":564,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":731,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":478,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":836,"title":{},"body":{"properties.html":{}}}],["update",{"_index":147,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["update(@param('id",{"_index":177,"title":{},"body":{"controllers/CatsController.html":{},"controllers/TagController.html":{}}}],["update(id",{"_index":158,"title":{},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{},"controllers/TagController.html":{},"injectables/TagService.html":{}}}],["updatecatdto",{"_index":159,"title":{"classes/UpdateCatDto.html":{}},"body":{"controllers/CatsController.html":{},"injectables/CatsService.html":{},"classes/UpdateCatDto.html":{},"coverage.html":{}}}],["updatedat",{"_index":503,"title":{},"body":{"classes/Tag.html":{}}}],["updatedatecolumn",{"_index":516,"title":{},"body":{"classes/Tag.html":{}}}],["updatepost",{"_index":421,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":462,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":437,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":195,"title":{},"body":{"injectables/CatsService.html":{},"controllers/PostsController.html":{},"injectables/TagService.html":{},"index.html":{}}}],["updatetagdto",{"_index":528,"title":{"classes/UpdateTagDto.html":{}},"body":{"controllers/TagController.html":{},"injectables/TagService.html":{},"classes/UpdateTagDto.html":{},"coverage.html":{}}}],["updating",{"_index":439,"title":{},"body":{"controllers/PostsController.html":{}}}],["upper",{"_index":580,"title":{},"body":{"controllers/UsersController.html":{}}}],["url",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["url''})@isstring()@isnotempty()@matches(/^[a",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["usefactory",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":57,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["user,post",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["user.dto",{"_index":372,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":330,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":336,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":338,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":334,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":350,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.entity",{"_index":620,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["userid",{"_index":436,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["username",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["userrepository",{"_index":626,"title":{},"body":{"injectables/UsersService.html":{}}}],["users",{"_index":357,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":619,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/dtos/create",{"_index":371,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["users/user.entity",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":566,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersmodule",{"_index":44,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":120,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["using",{"_index":791,"title":{},"body":{"index.html":{}}}],["usr",{"_index":648,"title":{},"body":{"injectables/UsersService.html":{}}}],["uuid",{"_index":560,"title":{},"body":{"entities/User.html":{}}}],["valid",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":287,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validation",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validator",{"_index":288,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateTagDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":307,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["varchar",{"_index":386,"title":{},"body":{"entities/Post.html":{},"classes/Tag.html":{},"entities/User.html":{}}}],["varchar',length",{"_index":518,"title":{},"body":{"classes/Tag.html":{}}}],["version",{"_index":834,"title":{},"body":{"properties.html":{}}}],["video",{"_index":783,"title":{},"body":{"index.html":{}}}],["visit",{"_index":772,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":786,"title":{},"body":{"index.html":{}}}],["void",{"_index":432,"title":{},"body":{"controllers/PostsController.html":{}}}],["want",{"_index":582,"title":{},"body":{"controllers/UsersController.html":{}}}],["watch",{"_index":726,"title":{},"body":{"index.html":{}}}],["website",{"_index":821,"title":{},"body":{"index.html":{}}}],["without",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["work",{"_index":413,"title":{},"body":{"entities/Post.html":{}}}],["working",{"_index":771,"title":{},"body":{"index.html":{}}}],["world",{"_index":95,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":800,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":814,"title":{},"body":{"index.html":{}}}],["you're",{"_index":735,"title":{},"body":{"index.html":{}}}],["z0",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z\\d@$!%*#?&]{8",{"_index":342,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)(?=.*[@$!%*#?&])[a",{"_index":341,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":340,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CatsModule.html":{},"modules/PostsModule.html":{},"modules/TagModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCatsModule\n\nCatsModule\n\nAppModule -->\n\nCatsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagModule\n\nTagModule\n\nAppModule -->\n\nTagModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CatsModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            TagModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { CatsModule } from './cats/cats.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './users/user.entity';\nimport { Post } from './posts/post.entity';\nimport { TagModule } from './tag/tag.module';\n\n\n\n@Module({\n  imports: [UsersModule, CatsModule, PostsModule, AuthModule,\n    TypeOrmModule.forRootAsync({\n      useFactory: async () => ({\n        type: 'postgres',\n        host: 'localhost',\n        port: 5432,\n        username: 'postgres',\n        password: 'admin',\n        database: 'nestjs-blog',\n        entities: [User,Post],\n        synchronize: true, // Disable in production\n      }),\n      imports: [], // Future imports like ConfigModule will go here\n      inject: [],  // Future injections like ConfigService will go here\n    }),\n    TagModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  \n  getHello(): string {\n    return 'Hello World! ddd';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { AuthService } from './providers/auth.service';\nimport { Controller } from '@nestjs/common';\n\n@Controller('auth')\nexport class AuthController {\n  constructor(\n    /*\n     * Injecting Auth Service\n     */\n    private readonly authService: AuthService,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\n\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  imports: [forwardRef(() => UsersModule)],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, forwardRef } from '@nestjs/common';\n\nimport { UsersService } from 'src/users/providers/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    // Injecting UserService\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n\n  public login(email: string, password: string, id: string) {\n    const user = this.usersService.findOneById('1234');\n    // login\n    return 'SAMPLE_TOKEN';\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Cat.html":{"url":"classes/Cat.html","title":"class - Cat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Cat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cats/entities/cat.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Cat {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CatsController.html":{"url":"controllers/CatsController.html","title":"controller - CatsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CatsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cats/cats.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                cats\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createCatDto: CreateCatDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/cats/cats.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCatDto\n                                            \n                                                            CreateCatDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/cats/cats.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/cats/cats.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/cats/cats.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateCatDto: UpdateCatDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/cats/cats.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCatDto\n                                            \n                                                            UpdateCatDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { CatsService } from './cats.service';\nimport { CreateCatDto } from './dto/create-cat.dto';\nimport { UpdateCatDto } from './dto/update-cat.dto';\n\n@Controller('cats')\nexport class CatsController {\n  constructor(private readonly catsService: CatsService) {}\n\n  @Post()\n  create(@Body() createCatDto: CreateCatDto) {\n    return this.catsService.create(createCatDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.catsService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.catsService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateCatDto: UpdateCatDto) {\n    return this.catsService.update(+id, updateCatDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.catsService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CatsModule.html":{"url":"modules/CatsModule.html","title":"module - CatsModule","body":"\n                   \n\n\n\n\n    Modules\n    CatsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CatsModule\n\n\n\ncluster_CatsModule_providers\n\n\n\n\nCatsService\n\nCatsService\n\n\n\nCatsModule\n\nCatsModule\n\nCatsModule -->\n\nCatsService->CatsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/cats/cats.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CatsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CatsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CatsService } from './cats.service';\nimport { CatsController } from './cats.controller';\n\n@Module({\n  controllers: [CatsController],\n  providers: [CatsService],\n})\nexport class CatsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CatsService.html":{"url":"injectables/CatsService.html","title":"injectable - CatsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CatsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cats/cats.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createCatDto: CreateCatDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cats/cats.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCatDto\n                                            \n                                                            CreateCatDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/cats/cats.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cats/cats.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cats/cats.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateCatDto: UpdateCatDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/cats/cats.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCatDto\n                                            \n                                                            UpdateCatDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateCatDto } from './dto/create-cat.dto';\nimport { UpdateCatDto } from './dto/update-cat.dto';\n\n@Injectable()\nexport class CatsService {\n  create(createCatDto: CreateCatDto) {\n    return 'This action adds a new cat';\n  }\n\n  findAll() {\n    return `This action returns all cats`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} cat`;\n  }\n\n  update(id: number, updateCatDto: UpdateCatDto) {\n    return `This action updates a #${id} cat`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} cat`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCatDto.html":{"url":"classes/CreateCatDto.html","title":"class - CreateCatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cats/dto/create-cat.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateCatDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:107\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: PostType, description: 'Possible values  'post', 'page', 'story', 'series''})@IsEnum(PostType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Must be a valid timestamp in ISO8601', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:79\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object else a validation error will be thrown'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'For example 'my-url''})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postStatus, description: 'Possible values 'draft', 'scheduled', 'review', 'published''})@IsEnum(postStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsArray()@IsOptional()@IsString({each: true})@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()@MinLength(4)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:26\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { postStatus } from '../enums/post-status.enum';\nimport {\n  IsArray,\n  IsEnum,\n  IsISO8601,\n  IsJSON,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUrl,\n  Matches,\n  MinLength,\n  ValidateNested,\n} from 'class-validator';\nimport { PostType } from '../enums/post-type.enum';\nimport { Type } from 'class-transformer';\nimport { CreatePostMetaOptionsDto } from './create-post-meta-options.dto';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  @ApiProperty()\n  @IsString()\n  @MinLength(4)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: PostType,\n    description: \"Possible values  'post', 'page', 'story', 'series'\",\n  })\n  @IsEnum(PostType)\n  @IsNotEmpty()\n  postType: PostType;\n\n  @ApiProperty({\n    description: \"For example 'my-url'\",\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: postStatus,\n    description: \"Possible values 'draft', 'scheduled', 'review', 'published'\",\n  })\n  @IsEnum(postStatus)\n  @IsNotEmpty()\n  status: postStatus;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsString()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'Serialize your JSON object else a validation error will be thrown',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string;\n\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsUrl()\n  featuredImageUrl?: string;\n\n  @ApiProperty({\n    description: 'Must be a valid timestamp in ISO8601',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsISO8601()\n  @IsOptional()\n  publishOn?: Date;\n\n  @ApiPropertyOptional()\n  @IsArray()\n  @IsOptional()\n  @IsString({ each: true })\n  @MinLength(3, { each: true })\n  tags?: string[];\n\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n        },\n        value: {\n          type: 'string',\n        },\n      },\n    },\n  })\n  @IsOptional()\n  @IsArray()\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  metaOptions?: CreatePostMetaOptionsDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTagDto.html":{"url":"classes/CreateTagDto.html","title":"class - CreateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tag/dto/create-tag.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                slug\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tag/dto/create-tag.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tag/dto/create-tag.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@Length(3, 255)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tag/dto/create-tag.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tag/dto/create-tag.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@MaxLength(512)@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tag/dto/create-tag.dto.ts:19\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString, IsUrl, Length, MaxLength } from \"class-validator\";\n\nexport class CreateTagDto {\n  // id\n  // name\n  //slug\n  // description\n  // schema\n  // featuredImageUrl\n \n  @IsNotEmpty()\n  @Length(3,255)\n  @IsString()\n  name: string;\n\n  @IsNotEmpty()\n  @MaxLength(512)\n  @IsString()\n  slug: string;\n\n  \n  @IsString()\n  description?: string;\n\n\n  @IsString()\n  schema?: string;\n\n  @IsString()\n  @IsUrl()\n  featuredImageUrl?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {message: 'Minimum eight characters, at least one letter, one number and one special character'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @Matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{8,}$/, {\n    message:\n      'Minimum eight characters, at least one letter, one number and one special character',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional()@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsInt, IsOptional } from 'class-validator';\n\nimport { Type } from 'class-transformer';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional()\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({name: 'id', description: 'this is an id', example: 1, required: true})@IsNotEmpty()@IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from \"@nestjs/swagger\";\nimport { CreateUserDto } from '../../users/dtos/create-user.dto';\nimport { IsInt, IsNotEmpty } from \"class-validator\";\nimport { CreatePostDto } from \"./create-post.dto\";\n\nexport class PatchPostDto extends PartialType(CreatePostDto){\n    @ApiProperty({\n        name :'id',\n        description :'this is an id',\n        example : 1,\n        required :true,\n    })\n    @IsNotEmpty()\n    @IsInt()\n    id:number\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateUserDto } from './create-user.dto';\nimport { PartialType } from '@nestjs/mapped-types';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Post.html":{"url":"entities/Post.html","title":"entity - Post","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Post\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/post.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                postType\n                            \n                            \n                                    \n                                    Optional\n                                publishOn\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto[]\n\n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PostType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: PostType, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        publishOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'timestamp', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 256, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: postStatus, nullable: false, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/post.entity.ts:17\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from \"typeorm\";\nimport * as request from 'supertest';\nimport { CreatePostMetaOptionsDto } from \"./dtos/create-post-meta-options.dto\";\nimport { PostType } from \"./enums/post-type.enum\";\nimport { postStatus } from \"./enums/post-status.enum\";\n\n@Entity()\nexport class Post {\n    @PrimaryGeneratedColumn()\n    id: number;\n  \n    @Column({\n      type: 'varchar',\n      length: 512,\n      nullable: false,\n    })\n    title: string;\n  \n    @Column({\n      type: 'enum',\n      enum: PostType,\n      nullable: false,\n      default: PostType.POST,\n    })\n    postType: PostType;\n  \n    @Column({\n      type: 'varchar',\n      length: 256,\n      nullable: false,\n      unique: true,\n    })\n    slug: string;\n  \n    @Column({\n      type: 'enum',\n      enum: postStatus,\n      nullable: false,\n      default: postStatus.DRAFT,\n    })\n    status: postStatus;\n  \n    @Column({\n      type: 'text',\n      nullable: true,\n    })\n    content?: string;\n  \n    @Column({\n      type: 'text',\n      nullable: true,\n    })\n    schema?: string;\n  \n    @Column({\n      type: 'varchar',\n      length: 1024,\n      nullable: true,\n    })\n    featuredImageUrl?: string;\n  \n    @Column({\n      type: 'timestamp', // 'datetime' in mysql\n      nullable: true,\n    })\n    publishOn?: Date;\n  \n    // Work on these in lecture on relationships\n    tags?: string[];\n    metaOptions?: CreatePostMetaOptionsDto[];\n  }\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Creates a new post for the blog.'})@ApiResponse({status: 201, description: 'You get a success 201 response if the post is created successfully'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'This an operation updating post'})@ApiResponse({status: 201, description: 'thas mean you have updates the post'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  constructor(\n    /*\n     *  Injecting Posts Service\n     */\n    private readonly postsService: PostsService,\n  ) {}\n\n  /*\n   * GET localhost:3000/posts/:userId\n   */\n  @Get('/:userId?')\n  public getPosts(@Param('userId') userId: string) {\n    return this.postsService.findAll(userId);\n  }\n\n  @ApiOperation({\n    summary: 'Creates a new post for the blog.',\n  })\n  @ApiResponse({\n    status: 201,\n    description:\n      'You get a success 201 response if the post is created successfully',\n  })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    console.log(createPostDto);\n  }\n\n  @ApiOperation({summary : 'This an operation updating post'})\n  @ApiResponse({\n    status:201,\n    description:'thas mean you have updates the post'\n  })\n  @Patch()\n  public updatePost(@Body() patchPostDto : PatchPostDto){\n      console.log(patchPostDto instanceof PatchPostDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Post } from './post.entity';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule,\n    TypeOrmModule.forFeature([Post]),\n  ],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createPost\n                            \n                            \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, postRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        postRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createCatDto: CreateCatDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCatDto\n                                            \n                                                            CreateCatDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from 'src/users/providers/users.service';\nimport { CreateCatDto } from '../../cats/dto/create-cat.dto';\nimport { Repository } from 'typeorm';\nimport { Post } from '../post.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class PostsService {\n  constructor(\n    /*\n     * Injecting Users Service\n     */\n    private readonly usersService: UsersService,\n    /**\n     * inject postRepository\n     */\n    @InjectRepository(Post)\n    private postRepository :Repository\n  ) {}\n\n  public findAll(userId: string) {\n    const user = this.usersService.findOneById(userId);\n\n    return [\n      {\n        user: user,\n        title: 'Test Tile',\n        content: 'Test Content',\n      },\n      {\n        user: user,\n        title: 'Test Tile 2',\n        content: 'Test Content 2',\n      },\n    ];\n  }\n\n  public async createPost(createCatDto :CreateCatDto){\n    let newPost = this.postRepository.create(createCatDto);\n    newPost = await this.postRepository.save(newPost);\n    return newPost;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ProductsController.html":{"url":"controllers/ProductsController.html","title":"controller - ProductsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ProductsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/products/products.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                products\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller('products')\nexport class ProductsController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProductsModule.html":{"url":"modules/ProductsModule.html","title":"module - ProductsModule","body":"\n                   \n\n\n\n\n    Modules\n    ProductsModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/products/products.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            ProductsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ProductsController } from './products.controller';\n\n@Module({\n  controllers: [ProductsController]\n})\nexport class ProductsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Tag.html":{"url":"classes/Tag.html","title":"class - Tag","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Tag\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tag/entities/tag.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deletedAt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                slug\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tag/entities/tag.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deletedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tag/entities/tag.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tag/entities/tag.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 1024, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tag/entities/tag.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tag/entities/tag.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 190, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tag/entities/tag.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'text', nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tag/entities/tag.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 512, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tag/entities/tag.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/tag/entities/tag.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  DeleteDateColumn,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport class Tag {\n  // id\n  // name\n  //slug\n  // description\n  // schema\n  // featuredImageUrl\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n  @Column({type: 'varchar',length: 190, nullable: false, unique: true})\n  name: string;\n\n @Column({type: 'varchar',length: 512, nullable: false, unique: true})\n  slug: string;\n\n  @Column({type: 'text',nullable: true})\n  description?: string;\n\n  @Column({type: 'text',nullable: true})\n  schema?: string;\n\n  @Column({type: 'varchar',length: 1024,nullable: true})\n  featuredImageUrl?: string;\n\n  @CreateDateColumn()\n  createdAt: Date;\n  @UpdateDateColumn()\n  updatedAt: Date;\n  @DeleteDateColumn()\n  deletedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TagController.html":{"url":"controllers/TagController.html","title":"controller - TagController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TagController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tag/tag.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tag\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createTagDto: CreateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/tag/tag.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/tag/tag.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/tag/tag.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/tag/tag.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateTagDto: UpdateTagDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/tag/tag.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateTagDto\n                                            \n                                                            UpdateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { TagService } from './tag.service';\nimport { CreateTagDto } from './dto/create-tag.dto';\nimport { UpdateTagDto } from './dto/update-tag.dto';\n\n@Controller('tag')\nexport class TagController {\n  constructor(private readonly tagService: TagService) {}\n\n  @Post()\n  create(@Body() createTagDto: CreateTagDto) {\n    return this.tagService.create(createTagDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.tagService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.tagService.findOne(+id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateTagDto: UpdateTagDto) {\n    return this.tagService.update(+id, updateTagDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.tagService.remove(+id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TagModule.html":{"url":"modules/TagModule.html","title":"module - TagModule","body":"\n                   \n\n\n\n\n    Modules\n    TagModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TagModule\n\n\n\ncluster_TagModule_providers\n\n\n\n\nTagService\n\nTagService\n\n\n\nTagModule\n\nTagModule\n\nTagModule -->\n\nTagService->TagModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tag/tag.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TagService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TagController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TagService } from './tag.service';\nimport { TagController } from './tag.controller';\n\n@Module({\n  controllers: [TagController],\n  providers: [TagService],\n})\nexport class TagModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TagService.html":{"url":"injectables/TagService.html","title":"injectable - TagService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TagService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tag/tag.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createTagDto: CreateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tag/tag.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createTagDto\n                                            \n                                                            CreateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/tag/tag.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tag/tag.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tag/tag.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateTagDto: UpdateTagDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/tag/tag.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateTagDto\n                                            \n                                                            UpdateTagDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateTagDto } from './dto/create-tag.dto';\nimport { UpdateTagDto } from './dto/update-tag.dto';\n\n@Injectable()\nexport class TagService {\n  create(createTagDto: CreateTagDto) {\n    return 'This action adds a new tag';\n  }\n\n  findAll() {\n    return `This action returns all tag`;\n  }\n\n  findOne(id: number) {\n    return `This action returns a #${id} tag`;\n  }\n\n  update(id: number, updateTagDto: UpdateTagDto) {\n    return `This action updates a #${id} tag`;\n  }\n\n  remove(id: number) {\n    return `This action removes a #${id} tag`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCatDto.html":{"url":"classes/UpdateCatDto.html","title":"class - UpdateCatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cats/dto/update-cat.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateCatDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateCatDto } from './create-cat.dto';\n\nexport class UpdateCatDto extends PartialType(CreateCatDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTagDto.html":{"url":"classes/UpdateTagDto.html","title":"class - UpdateTagDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTagDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tag/dto/update-tag.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateTagDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateTagDto } from './create-tag.dto';\n\nexport class UpdateTagDto extends PartialType(CreateTagDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 96, nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/user.entity.ts:34\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from \"typeorm\";\n\n@Entity()\nexport class User{\n    // @PrimaryGeneratedColumn()\n    // id:number;\n    //uuid generated\n    @PrimaryGeneratedColumn(\"uuid\")\n    id: string\n    @Column({\n        type:'varchar',\n        length: 96,\n        nullable: false,\n    })\n    firstName: string;\n    @Column({\n        type:'varchar',\n        length: 96,\n        nullable: true,\n    })\n    lastName: string;\n    @Column({\n            type:'varchar',\n            length: 96,\n            nullable: false,\n            unique:true\n        })\n    email: string;\n    @Column({\n        type:'varchar',\n        length: 96,\n        nullable: false,\n    })\n    password:string\n\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUsers\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUsers(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUserParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'Fetches a list of registered users on the application.'})@ApiQuery({name: 'limit', type: String, description: 'The upper limit of pages you want the pagination to return', required: false})@ApiQuery({name: 'page', type: String, description: 'The position of the page number that you want the API to return', required: false})@ApiResponse({status: 200, description: 'Users fetched successfully based on the query'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query,\n  Body,\n  ParseIntPipe,\n  DefaultValuePipe,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(\n    // Injecting Users Service\n    private readonly usersService: UsersService,\n  ) {}\n\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'Fetches a list of registered users on the application.'\n  })\n  @ApiQuery({\n    name: 'limit',\n    type: String,\n    description: 'The upper limit of pages you want the pagination to return',\n    required: false,\n  })\n  @ApiQuery({\n    name: 'page',\n    type: String,\n    description:\n      'The position of the page number that you want the API to return',\n    required: false,\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Users fetched successfully based on the query',\n  })\n  public getUsers(\n    @Param() getUserParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUserParamDto, limit, page);\n  }\n\n  @Post()\n  public createUsers(@Body() createUserDto: CreateUserDto) {\n      return this.usersService.createUser(createUserDto);\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_exports\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\n\nimport { AuthModule } from 'src/auth/auth.module';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './user.entity';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n  imports: [forwardRef(() => AuthModule),\n    TypeOrmModule.forFeature([User]),\n  ],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/providers/users.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:58\n                        \n                    \n\n\n            \n                \n                        create new user instance\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUserParamDto: GetUsersParamDto, limt: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUserParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limt\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: number; firstName: string; email: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AuthService } from 'src/auth/providers/auth.service';\nimport { GetUsersParamDto } from '../dtos/get-users-param.dto';\nimport { Injectable, Inject, forwardRef } from '@nestjs/common';\nimport { Repository } from 'typeorm';\nimport { User } from '../user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateUserDto } from '../dtos/create-user.dto';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    // Injecting Auth Service\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n\n    // Injecting UserRepository\n    @InjectRepository(User)\n    private userRepository :Repository\n  ) {}\n\n  /*\n   * Method to find all the users\n   */\n  public findAll(\n    getUserParamDto: GetUsersParamDto,\n    limt: number,\n    page: number,\n  ) {\n    const isAuth = this.authService.isAuth();\n    console.log(isAuth);\n\n    return [\n      {\n        firstName: 'John',\n        email: 'john@doe.com',\n      },\n      {\n        firstName: 'Alice',\n        email: 'alice@doe.com',\n      },\n    ];\n  }\n\n  /*\n   * Find a user by ID\n   */\n  public findOneById(id: string) {\n    return {\n      id: 1234,\n      firstName: 'Alice',\n      email: 'alice@doe.com',\n    };\n  }\n\n  /**\n   * create new user instance\n   */\n  public async createUser(createUserDto :CreateUserDto){\n    // check usr existance\n    const isExist = await this.userRepository.findOne({\n      where :{email :createUserDto.email},\n    })\n    // handle exception\n    // create new user\n    let newUser = this.userRepository.create(createUserDto);\n    newUser = await this.userRepository.save(newUser);\n\n    return newUser;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/cats/cats.controller.ts\n            \n            controller\n            CatsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/cats/cats.service.ts\n            \n            injectable\n            CatsService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/cats/dto/create-cat.dto.ts\n            \n            class\n            CreateCatDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/cats/dto/update-cat.dto.ts\n            \n            class\n            UpdateCatDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/cats/entities/cat.entity.ts\n            \n            class\n            Cat\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/post.entity.ts\n            \n            entity\n            Post\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/products/products.controller.ts\n            \n            controller\n            ProductsController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tag/dto/create-tag.dto.ts\n            \n            class\n            CreateTagDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tag/dto/update-tag.dto.ts\n            \n            class\n            UpdateTagDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tag/entities/tag.entity.ts\n            \n            class\n            Tag\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/tag/tag.controller.ts\n            \n            controller\n            TagController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tag/tag.service.ts\n            \n            injectable\n            TagService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/users/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.6\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^8.0.7\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            pg : ^8.11.5\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.12\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../post-status.enum.ts)\n                        \n                        \n                            PostType   (src/.../post-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/post-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/post-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CatsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProductsModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TagModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CatsModule\n\n\n\ncluster_CatsModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_TagModule\n\n\n\ncluster_TagModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nCatsModule\n\nCatsModule\n\nAppModule -->\n\nCatsModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nTagModule\n\nTagModule\n\nAppModule -->\n\nTagModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nCatsService\n\nCatsService\n\nCatsModule -->\n\nCatsService->CatsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nTagService\n\nTagService\n\nTagModule -->\n\nTagService->TagModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    12 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
